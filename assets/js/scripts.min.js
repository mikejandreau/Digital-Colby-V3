"use strict";

// CLASS HELPERS
// Vanilla JS class toggling scripts for use without jQuery
// hasClass
function hasClass(elem, className) {
  return new RegExp(' ' + className + ' ').test(' ' + elem.className + ' ');
} // addClass


function addClass(elem, className) {
  if (!hasClass(elem, className)) {
    elem.className += ' ' + className;
  }
} // removeClass


function removeClass(elem, className) {
  var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, ' ') + ' ';

  if (hasClass(elem, className)) {
    while (newClass.indexOf(' ' + className + ' ') >= 0) {
      newClass = newClass.replace(' ' + className + ' ', ' ');
    }

    elem.className = newClass.replace(/^\s+|\s+$/g, '');
  }
} // toggleClass


function toggleClass(elem, className) {
  var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, " ") + ' ';

  if (hasClass(elem, className)) {
    while (newClass.indexOf(" " + className + " ") >= 0) {
      newClass = newClass.replace(" " + className + " ", " ");
    }

    elem.className = newClass.replace(/^\s+|\s+$/g, '');
  } else {
    elem.className += ' ' + className;
  }
}
"use strict";

/**
* ISOTOPE MASONRY & FILTERING
* Trigger Isotope layouts with isotope-pkgd.js
*/
// Find .grid in DOM
var isotopeGridBlock = document.getElementsByClassName('grid'); // Run Isotope if .grid is present 

if (isotopeGridBlock.length > 0) {
  var iso = new Isotope('.grid', {
    itemSelector: '.grid-item',
    // layoutMode: 'fitRows'
    layoutMode: 'masonry' // masonry: {
    //   columnWidth: 50
    // }

  });
} // bind filter button click


var filtersElem = document.querySelector('.filter-buttons');

if (filtersElem) {
  // check to see if filtersElem is not null, then add event listenter
  filtersElem.addEventListener('click', function (event) {
    "use strict"; // only work with buttons

    if (!matchesSelector(event.target, 'button')) {
      return;
    }

    var filterValue = event.target.getAttribute('data-filter'); // use matching filter function
    // filterValue = filterFns[ filterValue ] || filterValue;

    iso.arrange({
      filter: filterValue
    });
  });
} // change is-checked class on buttons


var buttonGroups = document.querySelectorAll('.button-group');

for (var i = 0, len = buttonGroups.length; i < len; i++) {
  var buttonGroup = buttonGroups[i];
  radioButtonGroup(buttonGroup);
}

function radioButtonGroup(buttonGroup) {
  "use strict";

  buttonGroup.addEventListener('click', function (event) {
    // only work with buttons
    if (!matchesSelector(event.target, 'button')) {
      return;
    }

    buttonGroup.querySelector('.is-checked').classList.remove('is-checked');
    event.target.classList.add('is-checked');
  });
}
/**
 * File navigation.js.
 *
 * Handles toggling the navigation menu for small screens and enables TAB key
 * navigation support for dropdown menus.
 */
// 
// toggle between open states for search and main menu navbar
//  $('.navbar').on('show', function () {
//     var actives = $(this).find('.collapse.in'),
//         hasData;
//     if (actives && actives.length) {
//         hasData = actives.data('collapse')
//         if (hasData && hasData.transitioning) return
//         actives.collapse('hide')
//         hasData || actives.data('collapse', null)
//     }
// });
// ( function() {
// 	const siteNavigation = document.getElementById( 'site-navigation' );
// 	// Return early if the navigation don't exist.
// 	if ( ! siteNavigation ) {
// 		return;
// 	}
// 	const button = siteNavigation.getElementsByTagName( 'button' )[ 0 ];
// 	// Return early if the button don't exist.
// 	if ( 'undefined' === typeof button ) {
// 		return;
// 	}
// 	const menu = siteNavigation.getElementsByTagName( 'ul' )[ 0 ];
// 	// Hide menu toggle button if menu is empty and return early.
// 	if ( 'undefined' === typeof menu ) {
// 		button.style.display = 'none';
// 		return;
// 	}
// 	if ( ! menu.classList.contains( 'nav-menu' ) ) {
// 		menu.classList.add( 'nav-menu' );
// 	}
// 	// Toggle the .toggled class and the aria-expanded value each time the button is clicked.
// 	button.addEventListener( 'click', function() {
// 		siteNavigation.classList.toggle( 'toggled' );
// 		if ( button.getAttribute( 'aria-expanded' ) === 'true' ) {
// 			button.setAttribute( 'aria-expanded', 'false' );
// 		} else {
// 			button.setAttribute( 'aria-expanded', 'true' );
// 		}
// 	} );
// 	// Remove the .toggled class and set aria-expanded to false when the user clicks outside the navigation.
// 	document.addEventListener( 'click', function( event ) {
// 		const isClickInside = siteNavigation.contains( event.target );
// 		if ( ! isClickInside ) {
// 			siteNavigation.classList.remove( 'toggled' );
// 			button.setAttribute( 'aria-expanded', 'false' );
// 		}
// 	} );
// 	// Get all the link elements within the menu.
// 	const links = menu.getElementsByTagName( 'a' );
// 	// Get all the link elements with children within the menu.
// 	const linksWithChildren = menu.querySelectorAll( '.menu-item-has-children > a, .page_item_has_children > a' );
// 	// Toggle focus each time a menu link is focused or blurred.
// 	for ( const link of links ) {
// 		link.addEventListener( 'focus', toggleFocus, true );
// 		link.addEventListener( 'blur', toggleFocus, true );
// 	}
// 	// Toggle focus each time a menu link with children receive a touch event.
// 	for ( const link of linksWithChildren ) {
// 		link.addEventListener( 'touchstart', toggleFocus, false );
// 	}
// 	/**
// 	 * Sets or removes .focus class on an element.
// 	 */
// 	function toggleFocus() {
// 		if ( event.type === 'focus' || event.type === 'blur' ) {
// 			let self = this;
// 			// Move up through the ancestors of the current link until we hit .nav-menu.
// 			while ( ! self.classList.contains( 'nav-menu' ) ) {
// 				// On li elements toggle the class .focus.
// 				if ( 'li' === self.tagName.toLowerCase() ) {
// 					self.classList.toggle( 'focus' );
// 				}
// 				self = self.parentNode;
// 			}
// 		}
// 		if ( event.type === 'touchstart' ) {
// 			const menuItem = this.parentNode;
// 			event.preventDefault();
// 			for ( const link of menuItem.parentNode.children ) {
// 				if ( menuItem !== link ) {
// 					link.classList.remove( 'focus' );
// 				}
// 			}
// 			menuItem.classList.toggle( 'focus' );
// 		}
// 	}
// }() );
"use strict";
"use strict";

// main.js
// JQUERY USE STRICT SCRIPT WRAPPER
// scroll easing, scrollspy, fancybox, and isotope - comment what isn't needed, or add more
(function ($) {
  "use strict"; // Start of use strict
  // MOBILE MENU TOGGLE
  // toggle the mobile menu button open and closed states

  var removeClass = true;
  $(".navbar-toggler").click(function () {
    $(".navbar-toggler").toggleClass('is-active');
    $("#navbarSearch").removeClass('is-active');
    removeClass = false;
  }); // ignore clicking the navbar search

  $(".nav-search").click(function () {
    removeClass = false;
  }); // close nav if page is clicked

  $("html").click(function () {
    if (removeClass) {
      $(".navbar-toggler").removeClass('is-active');
      $('.navbar-collapse').collapse('hide');
    }

    removeClass = true;
  }); // closes responsive menu when a scroll trigger link is clicked

  $('.js-scroll-trigger').click(function () {
    $(".navbar-toggler").removeClass('is-active');
    $('.navbar-collapse').collapse('hide');
  }); // // closes responsive menu when a navbar link is clicked
  // $('.js-scroll-trigger > a').click(function() {
  //   $(".navbar-toggler").removeClass('is-active');
  //   $('.navbar-collapse').collapse('hide');
  // });
  // disable mobile nav for laptop and desktop

  $(window).resize(function () {
    if ($(this).width() > 991) {
      $(".navbar-toggler").removeClass('is-active');
      $('.navbar-collapse').collapse('hide');
    }
  }); // Search menu toggles

  $('#navbarSearchToggler').click(function () {
    $("#navbarSearch").toggleClass('is-active');
    $(".navbar-toggler").removeClass('is-active');
    $('.navbar-collapse').collapse('hide');
  });
  $('#navbarSearchClose').click(function () {
    $("#navbarSearch").removeClass('is-active');
  }); // // SCROLLUP BUTTON
  // // show scrollup button after scrolling 300px
  // scrollToTopButton = document.getElementById("scrollUpButton");
  // var showScrollToTop = function () {
  //   var y = window.scrollY;
  //   if (y >= 300) {
  //     scrollToTopButton.className = "scrollup show"
  //   } else {
  //     scrollToTopButton.className = "scrollup"
  //   }
  // };
  // window.addEventListener("scroll", showScrollToTop);

  $(window).scroll(function () {
    var scroll = $(window).scrollTop();

    if (scroll >= 300) {
      $("#scrollUpButton").addClass("show");
    } else {
      $("#scrollUpButton").removeClass("show");
    }
  }); // Smooth scrolling using jQuery easing

  $('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function () {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');

      if (target.length) {
        $('html, body').animate({
          scrollTop: target.offset().top - 56 // match px to padding-top of body tag

        }, 1000, "easeInOutExpo");
        return false;
      }
    }
  }); // Smooth scrolling using jQuery easing

  $('.js-scroll-trigger>a[href*="#"]:not([href="#"])').click(function () {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');

      if (target.length) {
        $('html, body').animate({
          scrollTop: target.offset().top - 56 // match px to padding-top of body tag

        }, 1000, "easeInOutExpo");
        return false;
      }
    }
  }); // Make sure scripts rendered

  $(document).ready(function () {
    console.log('document is ready, aww yeah');
  });
})(jQuery); // End of use strict
//# sourceMappingURL=data:application/json;charset=utf-8;base64,