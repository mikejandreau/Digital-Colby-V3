"use strict";

// CLASS HELPERS
// Vanilla JS class toggling scripts for use without jQuery
// hasClass
function hasClass(elem, className) {
  return new RegExp(' ' + className + ' ').test(' ' + elem.className + ' ');
} // addClass


function addClass(elem, className) {
  if (!hasClass(elem, className)) {
    elem.className += ' ' + className;
  }
} // removeClass


function removeClass(elem, className) {
  var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, ' ') + ' ';

  if (hasClass(elem, className)) {
    while (newClass.indexOf(' ' + className + ' ') >= 0) {
      newClass = newClass.replace(' ' + className + ' ', ' ');
    }

    elem.className = newClass.replace(/^\s+|\s+$/g, '');
  }
} // toggleClass


function toggleClass(elem, className) {
  var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, " ") + ' ';

  if (hasClass(elem, className)) {
    while (newClass.indexOf(" " + className + " ") >= 0) {
      newClass = newClass.replace(" " + className + " ", " ");
    }

    elem.className = newClass.replace(/^\s+|\s+$/g, '');
  } else {
    elem.className += ' ' + className;
  }
}
"use strict";

/**
* ISOTOPE MASONRY & FILTERING
* Trigger Isotope layouts with isotope-pkgd.js
*/
// Find .grid in DOM
if (document.getElementsByClassName('grid')[0]) {
  var radioButtonGroup = function radioButtonGroup(buttonGroup) {
    "use strict";

    buttonGroup.addEventListener('click', function (event) {
      // only work with buttons
      if (!matchesSelector(event.target, 'button')) {
        return;
      }

      buttonGroup.querySelector('.is-checked').classList.remove('is-checked');
      event.target.classList.add('is-checked');
    });
  };

  // Do something if class exists
  console.log('isotope initiated');
  var isotopeGridBlock = document.querySelector('.grid');
  var iso;
  imagesLoaded(isotopeGridBlock, function () {
    // init Isotope after all images have loaded
    iso = new Isotope(isotopeGridBlock, {
      itemSelector: '.grid-item',
      layoutMode: 'masonry'
    });
  }); // bind filter button click

  var filtersElem = document.querySelector('.filter-buttons');

  if (filtersElem) {
    // check to see if filtersElem is not null, then add event listenter
    filtersElem.addEventListener('click', function (event) {
      "use strict"; // only work with buttons

      if (!matchesSelector(event.target, 'button')) {
        return;
      }

      var filterValue = event.target.getAttribute('data-filter'); // use matching filter function
      // filterValue = filterFns[ filterValue ] || filterValue;

      iso.arrange({
        filter: filterValue
      });
    });
  } // change is-checked class on buttons


  var buttonGroups = document.querySelectorAll('.button-group');

  for (var i = 0, len = buttonGroups.length; i < len; i++) {
    var buttonGroup = buttonGroups[i];
    radioButtonGroup(buttonGroup);
  }
} else {// Do nothing
}
"use strict";

// main.js
// JQUERY USE STRICT SCRIPT WRAPPER
// scroll easing, scrollspy, fancybox, and isotope - comment what isn't needed, or add more
(function ($) {
  "use strict"; // Start of use strict
  // MOBILE MENU TOGGLE
  // toggle the mobile menu button open and closed states

  var removeClass = true;
  $(".navbar-toggler").click(function () {
    $(".navbar-toggler").toggleClass('is-active');
    $("#navbarSearch").removeClass('is-active');
    removeClass = false;
  }); // ignore clicking the navbar search

  $(".nav-search").click(function () {
    removeClass = false;
  }); // close nav if page is clicked

  $("html").click(function () {
    if (removeClass) {
      $(".navbar-toggler").removeClass('is-active');
      $('.navbar-collapse').collapse('hide');
    }

    removeClass = true;
  }); // closes responsive menu when a scroll trigger link is clicked

  $('.js-scroll-trigger').click(function () {
    $(".navbar-toggler").removeClass('is-active');
    $('.navbar-collapse').collapse('hide');
  }); // // closes responsive menu when a navbar link is clicked
  // $('.js-scroll-trigger > a').click(function() {
  //   $(".navbar-toggler").removeClass('is-active');
  //   $('.navbar-collapse').collapse('hide');
  // });
  // disable mobile nav for laptop and desktop

  $(window).resize(function () {
    if ($(this).width() > 991) {
      $(".navbar-toggler").removeClass('is-active');
      $('.navbar-collapse').collapse('hide');
    }
  }); // Search menu toggles

  $('#navbarSearchToggler').click(function () {
    $("#navbarSearch").toggleClass('is-active');
    $(".navbar-toggler").removeClass('is-active');
    $('.navbar-collapse').collapse('hide');
  });
  $('#navbarSearchClose').click(function () {
    $("#navbarSearch").removeClass('is-active');
  }); // // SCROLLUP BUTTON
  // // show scrollup button after scrolling 300px
  // scrollToTopButton = document.getElementById("scrollUpButton");
  // var showScrollToTop = function () {
  //   var y = window.scrollY;
  //   if (y >= 300) {
  //     scrollToTopButton.className = "scrollup show"
  //   } else {
  //     scrollToTopButton.className = "scrollup"
  //   }
  // };
  // window.addEventListener("scroll", showScrollToTop);

  $(window).scroll(function () {
    var scroll = $(window).scrollTop();

    if (scroll >= 300) {
      $("#scrollUpButton").addClass("show");
    } else {
      $("#scrollUpButton").removeClass("show");
    }
  }); // Smooth scrolling using jQuery easing

  $('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function () {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');

      if (target.length) {
        $('html, body').animate({
          scrollTop: target.offset().top - 56 // match px to padding-top of body tag

        }, 1000, "easeInOutExpo");
        return false;
      }
    }
  }); // Smooth scrolling using jQuery easing

  $('.js-scroll-trigger>a[href*="#"]:not([href="#"])').click(function () {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');

      if (target.length) {
        $('html, body').animate({
          scrollTop: target.offset().top - 56 // match px to padding-top of body tag

        }, 1000, "easeInOutExpo");
        return false;
      }
    }
  }); // Make sure scripts rendered

  $(document).ready(function () {
    console.log('document is ready, aww yeah');
  });
})(jQuery); // End of use strict
//# sourceMappingURL=data:application/json;charset=utf-8;base64,